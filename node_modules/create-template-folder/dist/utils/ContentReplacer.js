"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Content = void 0;
const consts_1 = require("../consts");
const path_1 = require("path");
class Content {
    static get sep() {
        return path_1.sep === "/" ? path_1.sep : "\\\\";
    }
    static makeFileName(file) {
        return file
            .replace(new RegExp(`^${this.sep}*`, "gi"), "")
            .replace(/_(?=\.)/, "");
    }
    static makeFolderStruct(folders, base) {
        return folders.map((e) => {
            const folderInformation = e.split(base).slice(-1)[0];
            if (!folderInformation) {
                return this.sep;
            }
            return folderInformation;
        });
    }
    static makeFileStruct(files, base) {
        return files.map((e) => [
            e,
            e.split(new RegExp(`${base}${this.sep}`)).slice(-1)[0],
        ]);
    }
    static replace(str, vars = {}, number = 2) {
        const keys = Object.keys(vars);
        if (!keys.length) {
            return str;
        }
        const regBase = keys
            .map((e) => {
            const leftSide = `\{`.repeat(number);
            const rightSide = `\}`.repeat(number);
            const regConstructor = `${consts_1.noCurliesBehind}${leftSide}${consts_1.optionalWhiteSpace}${e}${consts_1.optionalWhiteSpace}${rightSide}${consts_1.noCurliesAhead}`;
            return regConstructor;
        })
            .join("|");
        const regex = new RegExp(regBase, "g");
        return str.replace(regex, (matched) => {
            const insideBrackets = /[^{\}]+(?=})/g.exec(matched);
            return vars[insideBrackets[0].trim()];
        });
    }
}
exports.Content = Content;
//# sourceMappingURL=ContentReplacer.js.map