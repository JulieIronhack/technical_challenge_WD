"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FsOperationsSync = exports.FsOperations = void 0;
const fs = __importStar(require("fs"));
const fs_1 = require("fs");
const config_1 = require("../../config");
const consts_1 = require("../../consts");
const { mkdir, readFile, stat, writeFile } = fs_1.promises;
class FsOperations {
    constructor(config = config_1.createTemplateFolderConfig) {
        this.config = config;
    }
    exists(pathToCheck) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // const f = fs.stat()
                yield stat(pathToCheck);
                return [true, null];
            }
            catch (error) {
                return [false];
            }
        });
    }
    mkdir(pathToCreate) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.config.dryRun) {
                    const mkdirResult = yield mkdir(pathToCreate, { recursive: true });
                    return [mkdirResult];
                }
                return [""];
            }
            catch (error) {
                return ["", error];
            }
        });
    }
    readFile(pathToRead) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const content = yield readFile(pathToRead, consts_1.encoding);
                return [content];
            }
            catch (error) {
                return ["", error];
            }
        });
    }
    writeFile(pathToWriteTo, content) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.config.dryRun) {
                    yield writeFile(pathToWriteTo, content, consts_1.encoding);
                    return;
                }
            }
            catch (error) {
                return error;
            }
        });
    }
    readdir(source) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield fs.promises.readdir(source, { withFileTypes: true });
                return [result];
            }
            catch (error) {
                return [[], error];
            }
        });
    }
}
exports.FsOperations = FsOperations;
class FsOperationsSync {
    constructor(config = config_1.createTemplateFolderConfig) {
        this.config = config;
    }
    exists(pathToCheck) {
        try {
            fs.statSync(pathToCheck);
            return [true, null];
        }
        catch (error) {
            return [false];
        }
    }
    mkdir(pathToCreate) {
        try {
            if (!this.config.dryRun) {
                const mkDirResult = fs.mkdirSync(pathToCreate, { recursive: true });
                return [mkDirResult];
            }
            return [pathToCreate];
        }
        catch (error) {
            return ["", error];
        }
    }
    readFile(pathToRead) {
        try {
            const content = fs.readFileSync(pathToRead, consts_1.encoding);
            return [content];
        }
        catch (error) {
            return ["", error];
        }
    }
    writeFile(pathToWriteTo, content) {
        try {
            if (!this.config.dryRun) {
                fs.writeFileSync(pathToWriteTo, content, consts_1.encoding);
                return;
            }
        }
        catch (error) {
            return error;
        }
    }
    readdir(source) {
        try {
            const result = fs.readdirSync(source, { withFileTypes: true });
            return [result];
        }
        catch (error) {
            return [[], error];
        }
    }
}
exports.FsOperationsSync = FsOperationsSync;
//# sourceMappingURL=FsOperationRepo.js.map