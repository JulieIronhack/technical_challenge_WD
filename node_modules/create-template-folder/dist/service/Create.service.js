"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateService = void 0;
const config_1 = require("../config");
const consts_1 = require("../consts");
const utils_1 = require("../utils");
const IO_1 = require("../utils/IO");
class CreateService {
    constructor(config = config_1.createTemplateFolderConfig, pathRepo = new IO_1.PathRepo(), fsOps = new IO_1.FsOperations()) {
        this.config = config;
        this.pathRepo = pathRepo;
        this.fsOps = fsOps;
    }
    folder(outDir, relPath, 
    /* istanbul ignore next */
    vars = {}, 
    /* istanbul ignore next */
    number = 2) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = this.pathRepo.join(outDir, relPath);
            const realPaths = utils_1.Content.replace(path, vars, number);
            if (!this.config.dryRun) {
                yield this.fsOps.mkdir(realPaths);
            }
        });
    }
    file({ prevPath, vars, outDir, file, number }) {
        return __awaiter(this, void 0, void 0, function* () {
            const [fileContents, error] = yield this.fsOps.readFile(prevPath);
            if (error) {
                throw new Error(error.message);
            }
            const fileName = utils_1.Content.makeFileName(file);
            const path = this.pathRepo.join(outDir, fileName);
            const realPath = utils_1.Content.replace(path, vars, number);
            const content = utils_1.Content.replace(fileContents, vars, number);
            try {
                this.fsOps.writeFile(realPath, content);
                return fileName;
            }
            catch (error) {
                /* istanbul ignore next */
                throw new Error((0, consts_1.otherRed)(`Something unexpected has happened. Please check the console for more data. ${error.message}`));
            }
        });
    }
}
exports.CreateService = CreateService;
//# sourceMappingURL=Create.service.js.map