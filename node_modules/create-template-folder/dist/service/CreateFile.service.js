"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateFile = void 0;
const consts_1 = require("../consts");
const utils_1 = require("../utils");
const IO_1 = require("../utils/IO");
class CreateFile {
    /* istanbul ignore next */
    constructor(args = {}) {
        const { 
        /* istanbul ignore next */
        readFileRepo = new IO_1.ReadFileRepo(), 
        /* istanbul ignore next */
        makeFileNameRepo = new IO_1.MakeFileNameRepo(), 
        /* istanbul ignore next */
        joinRepo = new IO_1.JoinRepo(), 
        /* istanbul ignore next */
        writeFileRepo = new IO_1.WriteFileRepo(), } = args;
        this.readFileRepo = readFileRepo;
        this.makeFileNameRepo = makeFileNameRepo;
        this.joinRepo = joinRepo;
        this.writeFileRepo = writeFileRepo;
    }
    execute({ prevPath, vars, outDir, file, number, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const fileContents = this.readFileRepo.execute(prevPath);
            const fileName = this.makeFileNameRepo.execute(file);
            // console.log("fileName:", fileName);
            const path = this.joinRepo.execute(outDir, fileName);
            const realPath = utils_1.Content.replace(path, vars, number);
            const content = utils_1.Content.replace(fileContents, vars, number);
            try {
                yield this.writeFileRepo.execute(realPath, content);
                return fileName;
            }
            catch (error) {
                /* istanbul ignore next */
                throw new Error((0, consts_1.otherRed)(`Something unexpected has happened. Please check the console for more data. ${error.message}`));
            }
        });
    }
}
exports.CreateFile = CreateFile;
//# sourceMappingURL=CreateFile.service.js.map