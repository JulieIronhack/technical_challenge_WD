"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateTemplateFolder = void 0;
const service_1 = require("./service");
const GetAllService_service_1 = require("./service/GetAllService.service");
const IO_1 = require("./utils/IO");
class CreateTemplateFolder {
    constructor(args = {}) {
        const { fsOpsRepo = new IO_1.FsOperations(), getAllService = new GetAllService_service_1.GetAllService(), pathRepo = new IO_1.PathRepo(), createRepo = new service_1.CreateService(), } = args;
        this.fsOpsRepo = fsOpsRepo;
        this.getAllService = getAllService;
        this.pathRepo = pathRepo;
        this.createRepo = createRepo;
    }
    execute({ inDir, outDir, vars = {}, number = 2 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const [baseName] = inDir.split(this.pathRepo.sep).slice(-1);
            const folders = yield this.getAllService.folders(inDir, baseName);
            yield Promise.all(folders.map((e) => this.createRepo.folder(outDir, e, vars, number)));
            const files = yield this.getAllService.files(inDir, baseName);
            const fileNames = yield Promise.all(files.map(([rel, file]) => this.createRepo.file({
                file,
                outDir,
                vars,
                prevPath: rel,
                number,
            })));
            return fileNames;
        });
    }
}
exports.CreateTemplateFolder = CreateTemplateFolder;
//# sourceMappingURL=CreateTemplateFolder.js.map