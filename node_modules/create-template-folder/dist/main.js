"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTemplateFolder = void 0;
const config_1 = require("./config");
const consts_1 = require("./consts");
const CreateTemplateFolder_1 = require("./CreateTemplateFolder");
const service_1 = require("./service");
function createTemplateFolder(value, outDir, vars = {}, number = 2, dryRunOption = { dryRun: false }) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const createTemplate = new CreateTemplateFolder_1.CreateTemplateFolder();
        if (typeof value === "object") {
            // @ts-ignore
            const dryRun = (_b = (_a = outDir) === null || _a === void 0 ? void 0 : _a.dryRun) !== null && _b !== void 0 ? _b : false;
            config_1.createTemplateFolderConfig.init(dryRun);
            const errorBase = new service_1.ObjectErrorValidator();
            const validation = errorBase.execute(value);
            if (validation) {
                throw new Error((0, consts_1.otherRed)(validation));
            }
            return createTemplate.execute(value);
            // return copyTemplateDirectory({ ...value });
        }
        config_1.createTemplateFolderConfig.init(!!dryRunOption.dryRun);
        const errorBase = new service_1.StringErrorValidator();
        const validation = errorBase.execute(value, outDir, vars, number);
        if (validation) {
            throw new Error((0, consts_1.otherRed)(validation));
        }
        return createTemplate.execute({
            inDir: value,
            outDir: outDir,
            vars,
            number,
        });
    });
}
exports.createTemplateFolder = createTemplateFolder;
//# sourceMappingURL=main.js.map