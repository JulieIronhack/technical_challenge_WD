/// <reference types="node" />
import type { Dirent } from "fs";
import { MaybeError, Golangify } from "./Golangfify.type";
declare type ReadDirResponse = Dirent[];
export declare type DirResponse = Golangify<ReadDirResponse>;
export declare type ReadDir = Promise<Golangify<ReadDirResponse>>;
export interface IFsOperations {
    exists(pathToCheck: string): Promise<Golangify<boolean>>;
    mkdir(pathToCreate: string): Promise<Golangify<string>>;
    readFile(pathToRead: string): Promise<Golangify<string>>;
    writeFile(pathToWriteTo: string, content: string): Promise<MaybeError>;
    readdir(source: string): ReadDir;
}
export interface ISyncFsOperations {
    exists(pathToCheck: string): Golangify<boolean>;
    mkdir(pathToCreate: string): Golangify<string>;
    readFile(pathToRead: string): Golangify<string>;
    writeFile(pathToWriteTo: string, content: string): MaybeError;
    readdir(source: string): DirResponse;
}
declare type Promisify<T> = {
    [P in keyof T]: T[P] extends (...args: infer U) => infer V ? (...args: U) => Promise<Awaited<V>> : T[P];
};
export declare type Promised = Promisify<ISyncFsOperations>;
export {};
